package party

import (
	"sync"
	"time"

	"github.com/DyCAPSTeam/DyCAPS/internal/commitment"
	"go.dedis.ch/kyber/v3/pairing"

	"github.com/Nik-U/pbc"
	"github.com/ncw/gmp"
	"go.dedis.ch/kyber/v3/share"

	"github.com/DyCAPSTeam/DyCAPS/internal/polyring"
	"github.com/DyCAPSTeam/DyCAPS/pkg/protobuf"
)

//Party is an interface of committee members
type Party interface {
	send(m *protobuf.Message, des uint32) error
	broadcast(m *protobuf.Message) error
	getMessageWithType(messageType string) (*protobuf.Message, error)
}

type PiContent struct {
	j uint32
	//In DyCAPS.Share, CBj refers to commitment to B(x,index) generated by dealer.
	//In DyCAPS.Handoff, CBj refers to commitment to Q_i(x,index) generated by Party i
	CBj *pbc.Element
	CZj *pbc.Element //Z_j(x)=R_j(x)-R_j(0)
	WZ0 *pbc.Element //witness of Z_j(0)=0
	gFj *pbc.Element //g^F(j), F(j) is of t degree
}

type Pi struct {
	Gs         *pbc.Element // g^s
	PiContents []PiContent
}

//HonestParty is a struct of honest committee members
//TODO: add epoch number into this struct
type HonestParty struct {
	e            uint32   // epoch number
	N            uint32   // committee size
	F            uint32   // number of corrupted parties
	PID          uint32   // id of this party
	ipList       []string // ip list of the current committee
	portList     []string // port list of the current committee
	sendChannels []chan *protobuf.Message

	ipListNext         []string // ip list of the new committee
	portListNext       []string // port list of the new committee
	sendToNextChannels []chan *protobuf.Message

	dispatchChannels *sync.Map

	KZG      *commitment.DLPolyCommit
	mutexKZG *sync.Mutex

	SysSuite *pairing.SuiteBn256
	SigPK    *share.PubPoly  //tss pk
	SigSK    *share.PriShare //tss sk

	Proof *Pi //pi

	fullShare    polyring.Polynomial // B(i,y), i=p.PID+1
	reducedShare polyring.Polynomial // B(x,index), index=p.PID+1

	witness        []*pbc.Element //witness[index] = w_B(i,*), each party has at least 2t+1 witness
	witnessIndexes []*gmp.Int     //witnessIndexes[index] means the * value of witness[index]

	VSSStart         time.Time
	VSSEnd           time.Time
	ShareReduceStart time.Time
	ShareReduceEnd   time.Time
	ProactivizeStart time.Time
	ProactivizeEnd   time.Time
	ShareDistStart   time.Time
	ShareDistEnd     time.Time
}

// SRecElement is the set of elements for recover
type SRecElement struct {
	index uint32
	v     *gmp.Int
}

// SSigElement is the set of signatures
type SSigElement struct {
	index uint32
	Sig   []byte
}

// SComElement is the set of commitments
type SComElement struct {
	index uint32
	CB    *pbc.Element
}

// SBElement is the set of elements for full shares
type SBElement struct {
	index uint32
	CB    *pbc.Element
	v     *gmp.Int
	w     *pbc.Element
}

type RecoverMsg struct {
	sender   uint32
	index    uint32
	v        *gmp.Int
	w        *pbc.Element
	sigShare []byte
}

//NewHonestParty returns a new honest party object
func NewHonestParty(e uint32, N uint32, F uint32, pid uint32, ipList []string, portList []string, ipListNext []string, portListNext []string, sigPK *share.PubPoly, sigSK *share.PriShare) *HonestParty {
	var SysSuite = pairing.NewSuiteBn256()

	var KZG = new(commitment.DLPolyCommit)
	var mutexKZG sync.Mutex
	KZG.SetupFix(int(2 * F))

	piInit := new(Pi)
	piInit.Init(F, KZG)
	witness := make([]*pbc.Element, 2*F+2)
	witnessIndexes := make([]*gmp.Int, 2*F+2)
	for i := 0; uint32(i) < 2*F+2; i++ {
		witness[i] = KZG.NewG1()
		witnessIndexes[i] = gmp.NewInt(0)
	}
	p := HonestParty{
		e:                  e,
		N:                  N,
		F:                  F,
		PID:                pid,
		ipList:             ipList,
		portList:           portList,
		ipListNext:         ipListNext,
		portListNext:       portListNext,
		sendChannels:       make([]chan *protobuf.Message, N),
		sendToNextChannels: make([]chan *protobuf.Message, N),

		SysSuite: SysSuite,
		SigPK:    sigPK,
		SigSK:    sigSK,

		KZG:      KZG,
		mutexKZG: &mutexKZG,

		Proof: piInit,

		fullShare:      polyring.NewEmpty(),
		reducedShare:   polyring.NewEmpty(),
		witness:        witness,
		witnessIndexes: witnessIndexes,

		VSSStart:         time.Now(),
		VSSEnd:           time.Now(),
		ShareReduceStart: time.Now(),
		ShareReduceEnd:   time.Now(),
		ProactivizeStart: time.Now(),
		ProactivizeEnd:   time.Now(),
		ShareDistStart:   time.Now(),
		ShareDistEnd:     time.Now(),
	}
	return &p
}
